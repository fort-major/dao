type DecisionTopic = record { id : nat32; name : text; description : text };
type DecisionTopicSet = variant {
  It : nat32;
  Or : record { DecisionTopicSet; DecisionTopicSet };
  And : record { DecisionTopicSet; DecisionTopicSet };
  Not : DecisionTopicSet;
};
type DelegationTreeNode = record {
  id : principal;
  topicset : DecisionTopicSet;
  followers : Vec;
};
type FollowRequest = record {
  followee : principal;
  topics : opt DecisionTopicSet;
  proof : ReputationProof;
};
type GetDecisionTopicsResponse = record { entries : vec DecisionTopic };
type GetFolloweesOfRequest = record { ids : vec principal };
type GetFolloweesOfResponse = record {
  entries : vec vec record { principal; DecisionTopicSet };
};
type GetFollowersOfResponse = record { entries : vec DelegationTreeNode };
type GetLiquidDemocracyProofResponse = record {
  marker : text;
  tree_root : DelegationTreeNode;
};
type ReputationDelegationTreeNode = record {
  id : principal;
  reputation : nat;
  topicset : DecisionTopicSet;
  followers : vec ReputationDelegationTreeNode;
};
type ReputationProof = record {
  cert_raw : blob;
  body : opt ReputationProofBody;
};
type ReputationProofBody = record {
  reputation_delegation_tree : ReputationDelegationTreeNode;
  reputation_total_supply : nat;
};
type Vec = vec record {
  id : principal;
  topicset : variant {
    It : nat32;
    Or : record { DecisionTopicSet; DecisionTopicSet };
    And : record { DecisionTopicSet; DecisionTopicSet };
    Not : DecisionTopicSet;
  };
  followers : Vec;
};
service : {
  liquid_democracy__follow : (FollowRequest) -> (record {});
  liquid_democracy__get_decision_topics : (record {}) -> (
      GetDecisionTopicsResponse,
    ) query;
  liquid_democracy__get_followees_of : (GetFolloweesOfRequest) -> (
      GetFolloweesOfResponse,
    ) query;
  liquid_democracy__get_followers_of : (GetFolloweesOfRequest) -> (
      GetFollowersOfResponse,
    ) query;
  liquid_democracy__get_liquid_democracy_proof : (record {}) -> (
      GetLiquidDemocracyProofResponse,
    );
}
