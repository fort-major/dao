type CallToExecute = record {
  canister_id : principal;
  method_name : text;
  args_raw : blob;
};
type CastVoteRequest = record {
  id : VotingId;
  normalized_approval_level : opt nat;
  option_idx : nat32;
  proof : ReputationProof;
};
type CastVoteResponse = record { decision_made : bool };
type DecisionTopicSet = variant {
  It : nat32;
  Or : record { DecisionTopicSet; DecisionTopicSet };
  And : record { DecisionTopicSet; DecisionTopicSet };
  Not : DecisionTopicSet;
};
type GetActionableVotingsResponse = record { entries : vec VotingId };
type GetVotingEventsResponse = record { events : vec VotingEvent };
type GetVotingsRequest = record { ids : vec VotingId };
type GetVotingsResponse = record { entries : vec opt VotingExt };
type ProfileProof = record { cert_raw : blob; body : opt ProfileProofBody };
type ProfileProofBody = record { id : principal; is_team_member : bool };
type ReputationDelegationTreeNode = record {
  id : principal;
  reputation : nat;
  topicset : DecisionTopicSet;
  followers : vec ReputationDelegationTreeNode;
};
type ReputationProof = record {
  cert_raw : blob;
  body : opt ReputationProofBody;
};
type ReputationProofBody = record {
  reputation_delegation_tree : ReputationDelegationTreeNode;
  reputation_total_supply : nat;
};
type StartVotingRequest = record {
  profile_proof : ProfileProof;
  reputation_proof : ReputationProof;
  kind : VotingKind;
};
type StartVotingResponse = record { id : VotingId };
type SwapFrom = variant { Hour; Storypoint };
type SwapInto = variant { FMJ; ICP };
type Vote = record {
  normalized_approval_level : opt nat;
  total_voter_reputation : nat;
  depth : nat32;
};
type VotingEvent = variant { V0001 : VotingEventV1 };
type VotingEventV1 = variant {
  VotingExecuting : record {
    rep_per_option : vec nat;
    call : CallToExecute;
    voting_id : VotingId;
    on_timer : bool;
  };
  VotingSuccess : record { voting_id : VotingId };
  VotingFail : record { voting_id : VotingId; reason : text };
  VotingCreated : record {
    creator : principal;
    num_options : nat32;
    finish_early : nat;
    consensus_normalized : nat;
    voting_id : VotingId;
    quorum : nat;
  };
};
type VotingExt = record {
  id : VotingId;
  creator : principal;
  finish_early : nat;
  kind : VotingKind;
  consensus_normalized : nat;
  created_at : nat64;
  stage : VotingStage;
  quorum : nat;
  duration_ns : nat64;
  votes_per_option : vec record { nat; opt Vote };
  total_supply : nat;
};
type VotingId = variant {
  HumansEmploy : principal;
  HumansUnemploy : principal;
  StartSolveTask : nat64;
  DeleteTask : nat64;
  EvaluateTask : nat64;
  BankSetExchangeRate : record { SwapFrom; SwapInto };
};
type VotingKind = variant {
  HumansEmploy : record {
    hours_a_week_commitment : nat;
    candidate : principal;
  };
  HumansUnemploy : record { team_member : principal };
  StartSolveTask : record { task_id : nat64 };
  DeleteTask : record { task_id : nat64 };
  EvaluateTask : record { task_id : nat64; solutions : vec principal };
  BankSetExchangeRate : record {
    from : SwapFrom;
    into : SwapInto;
    new_rate : nat;
  };
};
type VotingStage = variant { Executing; InProgress };
service : {
  _votings__get_my_create_voting_timestamp : () -> (nat64) query;
  votings__cast_vote : (CastVoteRequest) -> (CastVoteResponse);
  votings__get_actionable_votings : (record {}) -> (
      GetActionableVotingsResponse,
    ) query;
  votings__get_events : (record {}) -> (GetVotingEventsResponse) query;
  votings__get_votings : (GetVotingsRequest) -> (GetVotingsResponse) query;
  votings__start_voting : (StartVotingRequest) -> (StartVotingResponse);
}
