type ArchivedTask = variant { V0001 : ArchivedTaskV1 };
type ArchivedTaskV1 = record {
  id : nat64;
  solution_fields : vec SolutionField;
  title : text;
  creator : principal;
  solver_constraints : vec SolverConstraint;
  description : text;
  created_at : nat64;
  decision_topics : vec nat32;
  assignees : opt vec principal;
  solutions : vec record { principal; Solution };
};
type AttachToTaskRequest = record {
  id : nat64;
  detach : bool;
  proof : ProfileProof;
};
type BackToEditTaskRequest = record { id : nat64 };
type CreateTaskRequest = record {
  solution_fields : vec SolutionField;
  title : text;
  solver_constraints : vec SolverConstraint;
  profile_proof : ProfileProof;
  storypoints_base : nat;
  days_to_solve : nat64;
  hours_base : nat;
  reputation_proof : ReputationProof;
  description : text;
  decision_topics : vec nat32;
  storypoints_ext_budget : nat;
  assignees : opt vec principal;
};
type CreateTaskResponse = record { id : nat64 };
type DecisionTopicSet = variant {
  It : nat32;
  Or : record { DecisionTopicSet; DecisionTopicSet };
  And : record { DecisionTopicSet; DecisionTopicSet };
  Not : DecisionTopicSet;
};
type DeleteRequest = record { id : nat64 };
type EditTaskRequest = record {
  id : nat64;
  new_days_to_solve_opt : opt nat64;
  new_solution_fields_opt : opt vec SolutionField;
  new_storypoints_base_opt : opt nat;
  new_solver_constraints_opt : opt vec SolverConstraint;
  new_storypoints_ext_budget_opt : opt nat;
  new_description_opt : opt text;
  new_decision_topics_opt : opt vec nat32;
  new_title_opt : opt text;
  new_assignees_opt : opt opt vec principal;
  new_hours_base_opt : opt nat;
};
type EvaluateRequest = record {
  id : nat64;
  evaluation_per_solution : vec record { principal; opt nat };
};
type FinishEditTaskResponse = record { task : Task };
type FinishSolveResponse = record { task : Task };
type GetArchivedTaskIdsRequest = record { pagination : PageRequest };
type GetArchivedTaskIdsResponse = record {
  pagination : PageResponse;
  entries : vec nat64;
};
type GetArchivedTasksByIdRequest = record { ids : vec nat64 };
type GetArchivedTasksByIdResponse = record {
  next : opt principal;
  entries : vec opt ArchivedTask;
};
type GetTaskIdsRequest = record {
  pagination : PageRequest;
  filter : TaskFilter;
};
type GetTaskIdsResponse = record {
  pagination : PageResponse;
  entries : vec nat64;
};
type GetTasksByIdRequest = record { ids : vec nat64 };
type GetTasksByIdResponse = record { entries : vec opt Task };
type GetTasksStatsResponse = record {
  ready_to_solve_tasks : nat32;
  next : principal;
  solved_tasks : nat32;
};
type InitRequest = record { task_archive_canister_id : principal };
type PageRequest = record { skip : nat32; take : nat32; reversed : bool };
type PageResponse = record { left : nat32; next : opt principal };
type ProfileProof = record { cert_raw : blob; body : opt ProfileProofBody };
type ProfileProofBody = record { id : principal; is_team_member : bool };
type ReputationDelegationTreeNode = record {
  id : principal;
  reputation : nat;
  topicset : DecisionTopicSet;
  followers : vec ReputationDelegationTreeNode;
};
type ReputationProof = record {
  cert_raw : blob;
  body : opt ReputationProofBody;
};
type ReputationProofBody = record {
  reputation_delegation_tree : ReputationDelegationTreeNode;
  reputation_total_supply : nat;
};
type Solution = record {
  evaluation : opt nat;
  attached_at : nat64;
  reward_hours : opt nat;
  want_rep : bool;
  fields : vec opt text;
  rejected : bool;
  reward_storypoints : opt nat;
};
type SolutionField = record {
  kind : SolutionFieldKind;
  name : text;
  description : text;
  required : bool;
};
type SolutionFieldKind = variant { Md; Url : record { kind : URLKind } };
type SolveTaskRequest = record {
  id : nat64;
  profile_proof : ProfileProof;
  filled_in_fields_opt : opt vec opt text;
  want_rep : bool;
};
type SolverConstraint = variant { MaxSolutions : nat32; TeamOnly };
type Task = record {
  id : nat64;
  solution_fields : vec SolutionField;
  title : text;
  creator : principal;
  solver_constraints : vec SolverConstraint;
  storypoints_base : nat;
  days_to_solve : nat64;
  hours_base : nat;
  description : text;
  created_at : nat64;
  stage : TaskStage;
  solvers : vec principal;
  decision_topics : vec nat32;
  storypoints_ext_budget : nat;
  assignees : opt vec principal;
  solutions : vec record { principal; Solution };
};
type TaskFilter = variant { Stage : TaskStage };
type TaskStage = variant {
  Solve : record { until_timestamp : nat64 };
  Edit;
  PreSolve;
  Evaluate;
};
type URLKind = variant {
  Any;
  Github;
  Notion;
  Figma;
  DfinityForum;
  FortMajorSite;
  Twitter;
};
service : (InitRequest) -> {
  _tasks__get_my_create_task_timestamp : () -> (nat64) query;
  get_archive_error : () -> (opt record { nat64; text }) query;
  task_archive__get_archived_tasks : (GetArchivedTaskIdsRequest) -> (
      GetArchivedTaskIdsResponse,
    ) query;
  task_archive__get_archived_tasks_by_id : (GetArchivedTasksByIdRequest) -> (
      GetArchivedTasksByIdResponse,
    ) query;
  tasks__attach_to_task : (AttachToTaskRequest) -> (record {});
  tasks__back_to_edit_task : (BackToEditTaskRequest) -> (record {});
  tasks__create_task : (CreateTaskRequest) -> (CreateTaskResponse);
  tasks__delete_task : (DeleteRequest) -> (record {});
  tasks__edit_task : (EditTaskRequest) -> (record {});
  tasks__evaluate_task : (EvaluateRequest) -> (record {});
  tasks__finish_edit_task : (DeleteRequest) -> (FinishEditTaskResponse);
  tasks__finish_solve_task : (DeleteRequest) -> (FinishSolveResponse);
  tasks__get_tasks : (GetTaskIdsRequest) -> (GetTaskIdsResponse) query;
  tasks__get_tasks_by_id : (GetTasksByIdRequest) -> (
      GetTasksByIdResponse,
    ) query;
  tasks__get_tasks_stats : (record {}) -> (GetTasksStatsResponse) query;
  tasks__solve_task : (SolveTaskRequest) -> (record {});
  tasks__start_solve_task : (DeleteRequest) -> (record {});
}
